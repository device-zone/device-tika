#!/bin/bash

#
# Apache Tika Server Autodiscovery
# ================================
#
# This script autogenerates any required tika instances.

set -e
umask 0007


#
# Handle the cleanup
# ------------------
cleanup_before_exit () {
  if [ -d "${tmpdir}" ]; then
    rm -rf "${tmpdir}"
  fi
}
# be in a temporay workspace (this works on linux and macosx)
tmpdir=`mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir'`
# trap catches the exit signal and runs the specified function
trap cleanup_before_exit EXIT
# be in our directory
cd "${tmpdir}"


#
# Create instance that does not yet exist
create_instance() {
  instance="${1}"

  cat > "tika2-${instance}" <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#

EOF

  install -m 640 "tika2-${instance}" "/etc/sysconfig/tika2-${instance}"
}


#
# Remove existing instance
remove_instance() {
  instance="${1}"

  rm -f "/etc/sysconfig/tika2-${instance}"
}


#
# Per application? Run all scripts

run_scripts() {

  instance="${1}"
  line="${2}"

  logger -t "${0}" "running autodiscovery for tika2 instance ${instance}..."

  rm -f "${line}/warning"

  find "$0.d" -type f -executable | sort | \
  while read x; do
    "$x" "${instance}" "${line}" < /dev/null || touch error;
  done

  if test ! -f "error"; then
    logger -t "${0}" "completed autodiscovery for tika2 instance ${instance}."
  else
    logger -t "${0}" "failed autodiscovery for tika2 instance ${instance}."
  fi

}


#
# Add/remove tika2 instances

find /etc/device/services/app/tika2/ -mindepth 1 -maxdepth 1 -type l | \
while read line; do

  target=$(readlink -f "$line")

  if test ! -f "$line/name.txt"; then
    continue;
  fi
  instance="$(head $line/name.txt)"

  # remove old instances
  if test -f "$line/removed"; then

    logger -t "${0}" "removing tika2 server instance ${instance}..."

    systemctl stop "tika2@${instance}"

    remove_instance "${instance}"
    logger -t "${0}" "removed tika2 server instance ${instance}."

    # remove folder
    rm -f "${target}"/*
    rmdir "${target}"
    rm -f "${line}"

  # add new instances
  elif test -f "$line/added"; then

    logger -t "${0}" "creating tika2 server instance ${instance}..."
    create_instance "${instance}"
    run_scripts "${instance}" "${line}"
    logger -t "${0}" "created tika2 server instance ${instance}."

    if test -f "$line/disabled.bin"; then

      systemctl stop "tika2@${instance}"

    else

      systemctl start "tika2@${instance}"

    fi

    rm -f "$line/added"

  # update instances
  elif test -f "$line/updated"; then

    instance="$(head $line/name.txt)"

    if test -f "$line/disabled.bin"; then

      systemctl stop "tika2@${instance}"

      run_scripts "${instance}" "${line}"

    else

      run_scripts "${instance}" "${line}"

      systemctl reload-or-restart "tika2@${instance}"

    fi

    rm -f "$line/updated"

  # something we depend on changed
  else

    instance="$(head $line/name.txt)"

    if test ! -f "$line/disabled.bin"; then

      run_scripts "${instance}" "${line}"

      systemctl reload-or-restart "tika2@${instance}"

    fi

  fi

done


